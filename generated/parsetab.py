
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP CMP_OP ELSE ELSIF FOR IDENTIFIER IF IN MUL_OP NEWLINE NUMBER PRINT WHILE programme : statement\n        | statement line  programme : statement line programme  programme : line programme  statement : assignation\n        | structure  statement : PRINT expression  structure : WHILE expression '{' programme '}'  structure : IF expression '{' programme '}'  structure : IF expression '{' programme '}' ELSE '{' programme '}'  structure : FOR identifiant IN nombre ',' nombre ',' nombre '{' programme '}'  nombre : NUMBER  identifiant : IDENTIFIER  line : NEWLINE expression : expression ADD_OP expression\n            | expression MUL_OP expression\n            | expression CMP_OP expressionexpression : NUMBER\n        | IDENTIFIER expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,3,7,12,31,32,47,52,],[6,6,-14,6,6,6,6,6,]),'NEWLINE':([0,2,3,4,5,7,12,14,16,17,28,30,31,32,34,35,36,37,42,43,47,51,52,54,],[7,7,7,-5,-6,-14,7,-7,-18,-19,-21,-22,7,7,-15,-16,-17,-20,-8,-9,7,-10,7,-11,]),'IDENTIFIER':([0,3,6,7,9,10,11,12,15,18,19,25,26,27,31,32,47,52,],[8,8,17,-14,17,17,23,8,17,17,17,17,17,17,8,8,8,8,]),'WHILE':([0,3,7,12,31,32,47,52,],[9,9,-14,9,9,9,9,9,]),'IF':([0,3,7,12,31,32,47,52,],[10,10,-14,10,10,10,10,10,]),'FOR':([0,3,7,12,31,32,47,52,],[11,11,-14,11,11,11,11,11,]),'$end':([1,2,4,5,7,12,13,14,16,17,24,28,30,34,35,36,37,42,43,51,54,],[0,-1,-5,-6,-14,-2,-4,-7,-18,-19,-3,-21,-22,-15,-16,-17,-20,-8,-9,-10,-11,]),'}':([2,4,5,7,12,13,14,16,17,24,28,30,34,35,36,37,38,39,42,43,49,51,53,54,],[-1,-5,-6,-14,-2,-4,-7,-18,-19,-3,-21,-22,-15,-16,-17,-20,42,43,-8,-9,51,-10,54,-11,]),'NUMBER':([6,9,10,15,18,19,25,26,27,33,44,48,],[16,16,16,16,16,16,16,16,16,41,41,41,]),'(':([6,9,10,15,18,19,25,26,27,],[18,18,18,18,18,18,18,18,18,]),'ADD_OP':([6,9,10,14,15,16,17,18,19,20,21,25,26,27,28,29,30,34,35,36,37,],[15,15,15,25,15,-18,-19,15,15,25,25,15,15,15,-21,25,25,-15,-16,25,-20,]),'=':([8,],[19,]),'MUL_OP':([14,16,17,20,21,28,29,30,34,35,36,37,],[26,-18,-19,26,26,-21,26,26,26,-16,26,-20,]),'CMP_OP':([14,16,17,20,21,28,29,30,34,35,36,37,],[27,-18,-19,27,27,-21,27,27,-15,-16,27,-20,]),'{':([16,17,20,21,28,34,35,36,37,41,45,50,],[-18,-19,31,32,-21,-15,-16,-17,-20,-12,47,52,]),')':([16,17,28,29,34,35,36,37,],[-18,-19,-21,37,-15,-16,-17,-20,]),'IN':([22,23,],[33,-13,]),',':([40,41,46,],[44,-12,48,]),'ELSE':([43,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,12,31,32,47,52,],[1,13,24,38,39,49,53,]),'statement':([0,3,12,31,32,47,52,],[2,2,2,2,2,2,2,]),'line':([0,2,3,12,31,32,47,52,],[3,12,3,3,3,3,3,3,]),'assignation':([0,3,12,31,32,47,52,],[4,4,4,4,4,4,4,]),'structure':([0,3,12,31,32,47,52,],[5,5,5,5,5,5,5,]),'expression':([6,9,10,15,18,19,25,26,27,],[14,20,21,28,29,30,34,35,36,]),'identifiant':([11,],[22,]),'nombre':([33,44,48,],[40,46,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',13),
  ('programme -> statement line','programme',2,'p_programme_statement','parserEmo.py',14),
  ('programme -> statement line programme','programme',3,'p_programme_recursive','parserEmo.py',18),
  ('programme -> line programme','programme',2,'p_programme_recursive_line','parserEmo.py',22),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',26),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',27),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',31),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',35),
  ('structure -> IF expression { programme }','structure',5,'p_cond_if','parserEmo.py',39),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_cond_if_else','parserEmo.py',43),
  ('structure -> FOR identifiant IN nombre , nombre , nombre { programme }','structure',11,'p_for','parserEmo.py',48),
  ('nombre -> NUMBER','nombre',1,'p_nombre','parserEmo.py',53),
  ('identifiant -> IDENTIFIER','identifiant',1,'p_identifiant','parserEmo.py',58),
  ('line -> NEWLINE','line',1,'p_newline','parserEmo.py',62),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',66),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',67),
  ('expression -> expression CMP_OP expression','expression',3,'p_expression_op','parserEmo.py',68),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserEmo.py',72),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserEmo.py',73),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',77),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',81),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserEmo.py',85),
]
