
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP FOR IDENTIFIER IN MUL_OP NUMBER PRINT WHILE programme : statement  programme : statement ';' programme  statement : assignation\n        | structure  statement : PRINT expression  structure : WHILE expression '{' programme '}'  structure : FOR identifiant IN nombre ',' nombre ',' nombre '{' programme '}'  nombre : NUMBER  identifiant : IDENTIFIER expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | IDENTIFIER expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,9,25,38,],[5,5,5,5,]),'IDENTIFIER':([0,5,7,8,9,11,14,15,20,21,25,38,],[6,13,13,18,6,13,13,13,13,13,6,6,]),'WHILE':([0,9,25,38,],[7,7,7,7,]),'FOR':([0,9,25,38,],[8,8,8,8,]),'$end':([1,2,3,4,10,12,13,19,22,24,27,28,29,33,40,],[0,-1,-3,-4,-5,-12,-13,-2,-15,-16,-10,-11,-14,-6,-7,]),'}':([2,3,4,10,12,13,19,22,24,27,28,29,30,33,39,40,],[-1,-3,-4,-5,-12,-13,-2,-15,-16,-10,-11,-14,33,-6,40,-7,]),';':([2,3,4,10,12,13,22,24,27,28,29,33,40,],[9,-3,-4,-5,-12,-13,-15,-16,-10,-11,-14,-6,-7,]),'NUMBER':([5,7,11,14,15,20,21,26,34,36,],[12,12,12,12,12,12,12,32,32,32,]),'(':([5,7,11,14,15,20,21,],[14,14,14,14,14,14,14,]),'ADD_OP':([5,7,10,11,12,13,14,15,16,20,21,22,23,24,27,28,29,],[11,11,20,11,-12,-13,11,11,20,11,11,-15,20,20,-10,-11,-14,]),'=':([6,],[15,]),'MUL_OP':([10,12,13,16,22,23,24,27,28,29,],[21,-12,-13,21,-15,21,21,21,-11,-14,]),'{':([12,13,16,22,27,28,29,32,37,],[-12,-13,25,-15,-10,-11,-14,-8,38,]),')':([12,13,22,23,27,28,29,],[-12,-13,-15,29,-10,-11,-14,]),'IN':([17,18,],[26,-9,]),',':([31,32,35,],[34,-8,36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,9,25,38,],[1,19,30,39,]),'statement':([0,9,25,38,],[2,2,2,2,]),'assignation':([0,9,25,38,],[3,3,3,3,]),'structure':([0,9,25,38,],[4,4,4,4,]),'expression':([5,7,11,14,15,20,21,],[10,16,22,23,24,27,28,]),'identifiant':([8,],[17,]),'nombre':([26,34,36,],[31,35,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserEmo.py',17),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',21),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',22),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',26),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',30),
  ('structure -> FOR identifiant IN nombre , nombre , nombre { programme }','structure',11,'p_for','parserEmo.py',35),
  ('nombre -> NUMBER','nombre',1,'p_nombre','parserEmo.py',46),
  ('identifiant -> IDENTIFIER','identifiant',1,'p_identifiant','parserEmo.py',51),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',55),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',56),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserEmo.py',60),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserEmo.py',61),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',65),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',69),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserEmo.py',73),
]
