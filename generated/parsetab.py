
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP BOOL BOOLEAN FALSE IDENTIFIER MUL_OP NUM NUMBER PRINT STR STRING TRUE WHILE programme : statement  programme : statement ';' programme  statement : assignation\n        | structure\n        | declaration statement : PRINT expression  structure : WHILE expression '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | IDENTIFIER\n        | BOOLEAN expression : STRING expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression  declaration : NUM IDENTIFIER '=' expression\n        | STR IDENTIFIER '=' expression\n        | BOOL IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,12,31,],[6,6,6,]),'IDENTIFIER':([0,6,8,9,10,11,12,14,19,20,26,27,31,32,33,34,],[7,16,16,22,23,24,7,16,16,16,16,16,7,16,16,16,]),'WHILE':([0,12,31,],[8,8,8,]),'NUM':([0,12,31,],[9,9,9,]),'STR':([0,12,31,],[10,10,10,]),'BOOL':([0,12,31,],[11,11,11,]),'$end':([1,2,3,4,5,13,15,16,17,18,25,28,30,35,36,37,39,40,41,42,],[0,-1,-3,-4,-5,-6,-10,-11,-12,-13,-2,-15,-16,-8,-9,-14,-17,-18,-19,-7,]),'}':([2,3,4,5,13,15,16,17,18,25,28,30,35,36,37,38,39,40,41,42,],[-1,-3,-4,-5,-6,-10,-11,-12,-13,-2,-15,-16,-8,-9,-14,42,-17,-18,-19,-7,]),';':([2,3,4,5,13,15,16,17,18,28,30,35,36,37,39,40,41,42,],[12,-3,-4,-5,-6,-10,-11,-12,-13,-15,-16,-8,-9,-14,-17,-18,-19,-7,]),'NUMBER':([6,8,14,19,20,26,27,32,33,34,],[15,15,15,15,15,15,15,15,15,15,]),'BOOLEAN':([6,8,14,19,20,26,27,32,33,34,],[17,17,17,17,17,17,17,17,17,17,]),'STRING':([6,8,14,19,20,26,27,32,33,34,],[18,18,18,18,18,18,18,18,18,18,]),'(':([6,8,14,19,20,26,27,32,33,34,],[19,19,19,19,19,19,19,19,19,19,]),'ADD_OP':([6,8,13,14,15,16,17,18,19,20,21,26,27,28,29,30,32,33,34,35,36,37,39,40,41,],[14,14,26,14,-10,-11,-12,-13,14,14,26,14,14,-15,26,26,14,14,14,-8,-9,-14,26,26,26,]),'=':([7,22,23,24,],[20,32,33,34,]),'MUL_OP':([13,15,16,17,18,21,28,29,30,35,36,37,39,40,41,],[27,-10,-11,-12,-13,27,-15,27,27,27,-9,-14,27,27,27,]),'{':([15,16,17,18,21,28,35,36,37,],[-10,-11,-12,-13,31,-15,-8,-9,-14,]),')':([15,16,17,18,28,29,35,36,37,],[-10,-11,-12,-13,-15,37,-8,-9,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,31,],[1,25,38,]),'statement':([0,12,31,],[2,2,2,]),'assignation':([0,12,31,],[3,3,3,]),'structure':([0,12,31,],[4,4,4,]),'declaration':([0,12,31,],[5,5,5,]),'expression':([6,8,14,19,20,26,27,32,33,34,],[13,21,28,29,30,35,36,39,40,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserEmo.py',17),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',21),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',22),
  ('statement -> declaration','statement',1,'p_statement','parserEmo.py',23),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',27),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',31),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',35),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',36),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',40),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',41),
  ('expression -> BOOLEAN','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',42),
  ('expression -> STRING','expression',1,'p_expression_string','parserEmo.py',46),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',50),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',54),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserEmo.py',58),
  ('declaration -> NUM IDENTIFIER = expression','declaration',4,'p_declaration','parserEmo.py',62),
  ('declaration -> STR IDENTIFIER = expression','declaration',4,'p_declaration','parserEmo.py',63),
  ('declaration -> BOOL IDENTIFIER = expression','declaration',4,'p_declaration','parserEmo.py',64),
]
