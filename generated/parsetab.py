
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP BOOL BOOLEAN CMP_OP ELSE EMO_BOOL EMO_CHECK EMO_CREEPY_SMILE EMO_CREEPY_SMILE_REVERSED EMO_CROSS EMO_NUM EMO_PENCIL EMO_STR FALSE FOR IDENTIFIER IF IN MUL_OP NEWLINE NUM NUMBER PRINT STR STRING TRUE WHILE programme : statement\n        | statement line  programme : statement line programme  programme : line programme  statement : assignation\n        | structure\n        | declaration statement : PRINT expression\n        | EMO_PENCIL expression  structure : WHILE expression '{' programme '}'  structure : IF expression '{' programme '}'\n        | EMO_CHECK expression '{' programme '}'  structure : IF expression '{' programme '}' ELSE '{' programme '}'\n        | EMO_CHECK expression '{' programme '}' EMO_CROSS '{' programme '}'  structure : FOR identifiant IN expression ',' expression ',' expression '{' programme '}'  structure : FOR NUM identifiant IN expression ',' expression ',' expression '{' programme '}'  identifiant : IDENTIFIER  line : NEWLINE expression : expression ADD_OP expression\n            | expression MUL_OP expression\n            | expression CMP_OP expressionexpression : NUMBER\n        | IDENTIFIER\n        | BOOLEAN expression : STRING expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : identifiant '=' expression  declaration : NUM identifiant '=' expression\n        | STR identifiant '=' expression\n        | BOOL identifiant '=' expression\n        | EMO_NUM identifiant '=' expression\n        | EMO_STR identifiant '=' expression\n        | EMO_BOOL identifiant '=' expression "
    
_lr_action_items = {'PRINT':([0,3,9,22,51,52,53,86,87,96,99,],[7,7,-18,7,7,7,7,7,7,7,7,]),'EMO_PENCIL':([0,3,9,22,51,52,53,86,87,96,99,],[8,8,-18,8,8,8,8,8,8,8,8,]),'NEWLINE':([0,2,3,4,5,6,9,22,24,26,27,28,29,31,48,50,51,52,53,62,63,64,65,71,72,73,74,75,76,77,78,79,86,87,94,95,96,99,100,102,],[9,9,9,-5,-6,-7,-18,9,-8,-22,-23,-24,-25,-9,-27,-28,9,9,9,-19,-20,-21,-26,-29,-30,-31,-32,-33,-34,-10,-11,-12,9,9,-13,-14,9,9,-15,-16,]),'WHILE':([0,3,9,22,51,52,53,86,87,96,99,],[11,11,-18,11,11,11,11,11,11,11,11,]),'IF':([0,3,9,22,51,52,53,86,87,96,99,],[12,12,-18,12,12,12,12,12,12,12,12,]),'EMO_CHECK':([0,3,9,22,51,52,53,86,87,96,99,],[13,13,-18,13,13,13,13,13,13,13,13,]),'FOR':([0,3,9,22,51,52,53,86,87,96,99,],[14,14,-18,14,14,14,14,14,14,14,14,]),'NUM':([0,3,9,14,22,51,52,53,86,87,96,99,],[15,15,-18,37,15,15,15,15,15,15,15,15,]),'STR':([0,3,9,22,51,52,53,86,87,96,99,],[16,16,-18,16,16,16,16,16,16,16,16,]),'BOOL':([0,3,9,22,51,52,53,86,87,96,99,],[17,17,-18,17,17,17,17,17,17,17,17,]),'EMO_NUM':([0,3,9,22,51,52,53,86,87,96,99,],[18,18,-18,18,18,18,18,18,18,18,18,]),'EMO_STR':([0,3,9,22,51,52,53,86,87,96,99,],[19,19,-18,19,19,19,19,19,19,19,19,]),'EMO_BOOL':([0,3,9,22,51,52,53,86,87,96,99,],[20,20,-18,20,20,20,20,20,20,20,20,]),'IDENTIFIER':([0,3,7,8,9,11,12,13,14,15,16,17,18,19,20,22,25,30,32,37,45,46,47,51,52,53,54,56,57,58,59,60,61,70,80,85,86,87,88,93,96,99,],[21,21,27,27,-18,27,27,27,21,21,21,21,21,21,21,21,27,27,27,21,27,27,27,21,21,21,27,27,27,27,27,27,27,27,27,27,21,21,27,27,21,21,]),'$end':([1,2,4,5,6,9,22,23,24,26,27,28,29,31,44,48,50,62,63,64,65,71,72,73,74,75,76,77,78,79,94,95,100,102,],[0,-1,-5,-6,-7,-18,-2,-4,-8,-22,-23,-24,-25,-9,-3,-27,-28,-19,-20,-21,-26,-29,-30,-31,-32,-33,-34,-10,-11,-12,-13,-14,-15,-16,]),'}':([2,4,5,6,9,22,23,24,26,27,28,29,31,44,48,50,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,79,90,91,94,95,98,100,101,102,],[-1,-5,-6,-7,-18,-2,-4,-8,-22,-23,-24,-25,-9,-3,-27,-28,-19,-20,-21,-26,77,78,79,-29,-30,-31,-32,-33,-34,-10,-11,-12,94,95,-13,-14,100,-15,102,-16,]),'NUMBER':([7,8,11,12,13,25,30,32,45,46,47,54,56,57,58,59,60,61,70,80,85,88,93,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'BOOLEAN':([7,8,11,12,13,25,30,32,45,46,47,54,56,57,58,59,60,61,70,80,85,88,93,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'STRING':([7,8,11,12,13,25,30,32,45,46,47,54,56,57,58,59,60,61,70,80,85,88,93,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'(':([7,8,11,12,13,25,30,32,45,46,47,54,56,57,58,59,60,61,70,80,85,88,93,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'ADD_OP':([7,8,11,12,13,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,54,56,57,58,59,60,61,62,63,64,65,69,70,71,72,73,74,75,76,80,81,84,85,88,89,92,93,97,],[25,25,25,25,25,45,25,-22,-23,-24,-25,25,45,25,45,45,45,25,25,25,-27,45,45,25,25,25,25,25,25,25,-19,-20,45,-26,45,25,45,45,45,45,45,45,25,45,45,25,25,45,45,25,45,]),'=':([10,21,38,39,40,41,42,43,],[32,-17,56,57,58,59,60,61,]),'IN':([21,36,55,],[-17,54,70,]),'MUL_OP':([24,26,27,28,29,31,33,34,35,48,49,50,62,63,64,65,69,71,72,73,74,75,76,81,84,89,92,97,],[46,-22,-23,-24,-25,46,46,46,46,-27,46,46,46,-20,46,-26,46,46,46,46,46,46,46,46,46,46,46,46,]),'CMP_OP':([24,26,27,28,29,31,33,34,35,48,49,50,62,63,64,65,69,71,72,73,74,75,76,81,84,89,92,97,],[47,-22,-23,-24,-25,47,47,47,47,-27,47,47,-19,-20,47,-26,47,47,47,47,47,47,47,47,47,47,47,47,]),'{':([26,27,28,29,33,34,35,48,62,63,64,65,82,83,92,97,],[-22,-23,-24,-25,51,52,53,-27,-19,-20,-21,-26,86,87,96,99,]),')':([26,27,28,29,48,49,62,63,64,65,],[-22,-23,-24,-25,-27,65,-19,-20,-21,-26,]),',':([26,27,28,29,48,62,63,64,65,69,81,84,89,],[-22,-23,-24,-25,-27,-19,-20,-21,-26,80,85,88,93,]),'ELSE':([78,],[82,]),'EMO_CROSS':([79,],[83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,22,51,52,53,86,87,96,99,],[1,23,44,66,67,68,90,91,98,101,]),'statement':([0,3,22,51,52,53,86,87,96,99,],[2,2,2,2,2,2,2,2,2,2,]),'line':([0,2,3,22,51,52,53,86,87,96,99,],[3,22,3,3,3,3,3,3,3,3,3,]),'assignation':([0,3,22,51,52,53,86,87,96,99,],[4,4,4,4,4,4,4,4,4,4,]),'structure':([0,3,22,51,52,53,86,87,96,99,],[5,5,5,5,5,5,5,5,5,5,]),'declaration':([0,3,22,51,52,53,86,87,96,99,],[6,6,6,6,6,6,6,6,6,6,]),'identifiant':([0,3,14,15,16,17,18,19,20,22,37,51,52,53,86,87,96,99,],[10,10,36,38,39,40,41,42,43,10,55,10,10,10,10,10,10,10,]),'expression':([7,8,11,12,13,25,30,32,45,46,47,54,56,57,58,59,60,61,70,80,85,88,93,],[24,31,33,34,35,48,49,50,62,63,64,69,71,72,73,74,75,76,81,84,89,92,97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',14),
  ('programme -> statement line','programme',2,'p_programme_statement','parserEmo.py',15),
  ('programme -> statement line programme','programme',3,'p_programme_recursive','parserEmo.py',20),
  ('programme -> line programme','programme',2,'p_programme_recursive_line','parserEmo.py',24),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',28),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',29),
  ('statement -> declaration','statement',1,'p_statement','parserEmo.py',30),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',34),
  ('statement -> EMO_PENCIL expression','statement',2,'p_statement_print','parserEmo.py',35),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',39),
  ('structure -> IF expression { programme }','structure',5,'p_cond_if','parserEmo.py',43),
  ('structure -> EMO_CHECK expression { programme }','structure',5,'p_cond_if','parserEmo.py',44),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_cond_if_else','parserEmo.py',48),
  ('structure -> EMO_CHECK expression { programme } EMO_CROSS { programme }','structure',9,'p_cond_if_else','parserEmo.py',49),
  ('structure -> FOR identifiant IN expression , expression , expression { programme }','structure',11,'p_for','parserEmo.py',53),
  ('structure -> FOR NUM identifiant IN expression , expression , expression { programme }','structure',12,'p_for_decl','parserEmo.py',61),
  ('identifiant -> IDENTIFIER','identifiant',1,'p_identifiant','parserEmo.py',69),
  ('line -> NEWLINE','line',1,'p_newline','parserEmo.py',73),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',77),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',78),
  ('expression -> expression CMP_OP expression','expression',3,'p_expression_op','parserEmo.py',79),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',83),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',84),
  ('expression -> BOOLEAN','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',85),
  ('expression -> STRING','expression',1,'p_expression_string','parserEmo.py',89),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',93),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',97),
  ('assignation -> identifiant = expression','assignation',3,'p_assign','parserEmo.py',101),
  ('declaration -> NUM identifiant = expression','declaration',4,'p_declaration','parserEmo.py',105),
  ('declaration -> STR identifiant = expression','declaration',4,'p_declaration','parserEmo.py',106),
  ('declaration -> BOOL identifiant = expression','declaration',4,'p_declaration','parserEmo.py',107),
  ('declaration -> EMO_NUM identifiant = expression','declaration',4,'p_declaration','parserEmo.py',108),
  ('declaration -> EMO_STR identifiant = expression','declaration',4,'p_declaration','parserEmo.py',109),
  ('declaration -> EMO_BOOL identifiant = expression','declaration',4,'p_declaration','parserEmo.py',110),
]
