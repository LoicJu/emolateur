
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP FOR IDENTIFIER IN MUL_OP NEWLINE NUMBER PRINT WHILE programme : statement \n        | statement line  programme : statement line programme  programme : line programme  statement : assignation\n        | structure  statement : PRINT expression  structure : WHILE expression '{' programme '}'  structure : FOR identifiant IN nombre ',' nombre ',' nombre '{' programme '}'  nombre : NUMBER  identifiant : IDENTIFIER  line : NEWLINE expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | IDENTIFIER expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,3,7,11,28,41,],[6,6,-12,6,6,6,]),'NEWLINE':([0,2,3,4,5,7,11,13,15,16,25,27,28,30,31,32,36,41,43,],[7,7,7,-5,-6,-12,7,-7,-15,-16,-18,-19,7,-13,-14,-17,-8,7,-9,]),'IDENTIFIER':([0,3,6,7,9,10,11,14,17,18,23,24,28,41,],[8,8,16,-12,16,21,8,16,16,16,16,16,8,8,]),'WHILE':([0,3,7,11,28,41,],[9,9,-12,9,9,9,]),'FOR':([0,3,7,11,28,41,],[10,10,-12,10,10,10,]),'$end':([1,2,4,5,7,11,12,13,15,16,22,25,27,30,31,32,36,43,],[0,-1,-5,-6,-12,-2,-4,-7,-15,-16,-3,-18,-19,-13,-14,-17,-8,-9,]),'}':([2,4,5,7,11,12,13,15,16,22,25,27,30,31,32,33,36,42,43,],[-1,-5,-6,-12,-2,-4,-7,-15,-16,-3,-18,-19,-13,-14,-17,36,-8,43,-9,]),'NUMBER':([6,9,14,17,18,23,24,29,37,39,],[15,15,15,15,15,15,15,35,35,35,]),'(':([6,9,14,17,18,23,24,],[17,17,17,17,17,17,17,]),'ADD_OP':([6,9,13,14,15,16,17,18,19,23,24,25,26,27,30,31,32,],[14,14,23,14,-15,-16,14,14,23,14,14,-18,23,23,-13,-14,-17,]),'=':([8,],[18,]),'MUL_OP':([13,15,16,19,25,26,27,30,31,32,],[24,-15,-16,24,-18,24,24,24,-14,-17,]),'{':([15,16,19,25,30,31,32,35,40,],[-15,-16,28,-18,-13,-14,-17,-10,41,]),')':([15,16,25,26,30,31,32,],[-15,-16,-18,32,-13,-14,-17,]),'IN':([20,21,],[29,-11,]),',':([34,35,38,],[37,-10,39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,11,28,41,],[1,12,22,33,42,]),'statement':([0,3,11,28,41,],[2,2,2,2,2,]),'line':([0,2,3,11,28,41,],[3,11,3,3,3,3,]),'assignation':([0,3,11,28,41,],[4,4,4,4,4,]),'structure':([0,3,11,28,41,],[5,5,5,5,5,]),'expression':([6,9,14,17,18,23,24,],[13,19,25,26,27,30,31,]),'identifiant':([10,],[20,]),'nombre':([29,37,39,],[34,38,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',13),
  ('programme -> statement line','programme',2,'p_programme_statement','parserEmo.py',14),
  ('programme -> statement line programme','programme',3,'p_programme_recursive','parserEmo.py',18),
  ('programme -> line programme','programme',2,'p_programme_recursive_line','parserEmo.py',22),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',26),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',27),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',31),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',35),
  ('structure -> FOR identifiant IN nombre , nombre , nombre { programme }','structure',11,'p_for','parserEmo.py',40),
  ('nombre -> NUMBER','nombre',1,'p_nombre','parserEmo.py',45),
  ('identifiant -> IDENTIFIER','identifiant',1,'p_identifiant','parserEmo.py',50),
  ('line -> NEWLINE','line',1,'p_newline','parserEmo.py',54),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',58),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',59),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserEmo.py',63),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserEmo.py',64),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',68),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',72),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserEmo.py',76),
]
