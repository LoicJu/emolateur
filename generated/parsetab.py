
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP CMP_OP ELSE EMO_CREEPYSMILE EMO_PENCIL FOR IDENTIFIER IF IN MUL_OP NEWLINE NUMBER PRINT WHILE programme : statement\n        | statement line  programme : statement line programme  programme : line programme  statement : assignation\n        | structure  statement : PRINT expression  structure : WHILE expression '{' programme '}'  structure : IF expression '{' programme '}'  structure : IF expression '{' programme '}' ELSE '{' programme '}'  structure : FOR identifiant IN nombre ',' nombre ',' nombre '{' programme '}'  nombre : NUMBER  identifiant : IDENTIFIER  line : NEWLINE expression : expression ADD_OP expression\n            | expression MUL_OP expression\n            | expression CMP_OP expressionexpression : NUMBER\n        | IDENTIFIER expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression  statement : EMO_PENCIL expression "
    
_lr_action_items = {'PRINT':([0,3,8,13,33,34,49,54,],[6,6,-14,6,6,6,6,6,]),'EMO_PENCIL':([0,3,8,13,33,34,49,54,],[7,7,-14,7,7,7,7,7,]),'NEWLINE':([0,2,3,4,5,8,13,15,17,18,20,30,32,33,34,36,37,38,39,44,45,49,53,54,56,],[8,8,8,-5,-6,-14,8,-7,-18,-19,-23,-21,-22,8,8,-15,-16,-17,-20,-8,-9,8,-10,8,-11,]),'IDENTIFIER':([0,3,6,7,8,10,11,12,13,16,19,21,27,28,29,33,34,49,54,],[9,9,18,18,-14,18,18,25,9,18,18,18,18,18,18,9,9,9,9,]),'WHILE':([0,3,8,13,33,34,49,54,],[10,10,-14,10,10,10,10,10,]),'IF':([0,3,8,13,33,34,49,54,],[11,11,-14,11,11,11,11,11,]),'FOR':([0,3,8,13,33,34,49,54,],[12,12,-14,12,12,12,12,12,]),'$end':([1,2,4,5,8,13,14,15,17,18,20,26,30,32,36,37,38,39,44,45,53,56,],[0,-1,-5,-6,-14,-2,-4,-7,-18,-19,-23,-3,-21,-22,-15,-16,-17,-20,-8,-9,-10,-11,]),'}':([2,4,5,8,13,14,15,17,18,20,26,30,32,36,37,38,39,40,41,44,45,51,53,55,56,],[-1,-5,-6,-14,-2,-4,-7,-18,-19,-23,-3,-21,-22,-15,-16,-17,-20,44,45,-8,-9,53,-10,56,-11,]),'NUMBER':([6,7,10,11,16,19,21,27,28,29,35,46,50,],[17,17,17,17,17,17,17,17,17,17,43,43,43,]),'(':([6,7,10,11,16,19,21,27,28,29,],[19,19,19,19,19,19,19,19,19,19,]),'ADD_OP':([6,7,10,11,15,16,17,18,19,20,21,22,23,27,28,29,30,31,32,36,37,38,39,],[16,16,16,16,27,16,-18,-19,16,27,16,27,27,16,16,16,-21,27,27,-15,-16,27,-20,]),'=':([9,],[21,]),'MUL_OP':([15,17,18,20,22,23,30,31,32,36,37,38,39,],[28,-18,-19,28,28,28,-21,28,28,28,-16,28,-20,]),'CMP_OP':([15,17,18,20,22,23,30,31,32,36,37,38,39,],[29,-18,-19,29,29,29,-21,29,29,-15,-16,29,-20,]),'{':([17,18,22,23,30,36,37,38,39,43,47,52,],[-18,-19,33,34,-21,-15,-16,-17,-20,-12,49,54,]),')':([17,18,30,31,36,37,38,39,],[-18,-19,-21,39,-15,-16,-17,-20,]),'IN':([24,25,],[35,-13,]),',':([42,43,48,],[46,-12,50,]),'ELSE':([45,],[47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,13,33,34,49,54,],[1,14,26,40,41,51,55,]),'statement':([0,3,13,33,34,49,54,],[2,2,2,2,2,2,2,]),'line':([0,2,3,13,33,34,49,54,],[3,13,3,3,3,3,3,3,]),'assignation':([0,3,13,33,34,49,54,],[4,4,4,4,4,4,4,]),'structure':([0,3,13,33,34,49,54,],[5,5,5,5,5,5,5,]),'expression':([6,7,10,11,16,19,21,27,28,29,],[15,20,22,23,30,31,32,36,37,38,]),'identifiant':([12,],[24,]),'nombre':([35,46,50,],[42,48,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',14),
  ('programme -> statement line','programme',2,'p_programme_statement','parserEmo.py',15),
  ('programme -> statement line programme','programme',3,'p_programme_recursive','parserEmo.py',20),
  ('programme -> line programme','programme',2,'p_programme_recursive_line','parserEmo.py',24),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',28),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',29),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',33),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',37),
  ('structure -> IF expression { programme }','structure',5,'p_cond_if','parserEmo.py',41),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_cond_if_else','parserEmo.py',45),
  ('structure -> FOR identifiant IN nombre , nombre , nombre { programme }','structure',11,'p_for','parserEmo.py',50),
  ('nombre -> NUMBER','nombre',1,'p_nombre','parserEmo.py',59),
  ('identifiant -> IDENTIFIER','identifiant',1,'p_identifiant','parserEmo.py',64),
  ('line -> NEWLINE','line',1,'p_newline','parserEmo.py',68),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',72),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',73),
  ('expression -> expression CMP_OP expression','expression',3,'p_expression_op','parserEmo.py',74),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserEmo.py',78),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserEmo.py',79),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',83),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',87),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserEmo.py',91),
  ('statement -> EMO_PENCIL expression','statement',2,'p_emo_pencil','parserEmo.py',97),
]
