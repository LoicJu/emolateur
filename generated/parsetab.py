
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP BOOL BOOLEAN CMP_OP ELSE EMO_BOOL EMO_CHECK EMO_CREEPY_SMILE EMO_CREEPY_SMILE_REVERSED EMO_CROSS EMO_DEVIL EMO_EYES EMO_NUM EMO_PENCIL EMO_PLEADING EMO_STR FALSE FOR IDENTIFIER IF IN MUL_OP NEWLINE NUM NUMBER PRINT STR STRING TRUE WHILE programme : statement\n        | statement line  programme : statement line programme  programme : line programme  statement : assignation\n        | structure\n        | declaration statement : PRINT expression\n        | EMO_PENCIL expression  structure : WHILE expression '{' programme '}'\n        | EMO_EYES expression '{' programme '}'  structure : IF expression '{' programme '}'\n        | EMO_CHECK expression '{' programme '}'  structure : IF expression '{' programme '}' ELSE '{' programme '}'\n        | EMO_CHECK expression '{' programme '}' EMO_CROSS '{' programme '}'  structure : FOR identifiant IN expression ',' expression ',' expression '{' programme '}'\n        | EMO_CREEPY_SMILE identifiant IN expression ',' expression ',' expression '{' programme '}'  structure : FOR NUM identifiant IN expression ',' expression ',' expression '{' programme '}'\n        | EMO_CREEPY_SMILE_REVERSED EMO_NUM identifiant IN expression ',' expression ',' expression '{' programme '}'  structure : EMO_PLEADING EMO_NUM identifiant expression '{' programme '}'  structure : EMO_DEVIL EMO_NUM identifiant expression '{' programme '}'  identifiant : IDENTIFIER  line : NEWLINE expression : expression ADD_OP expression\n            | expression MUL_OP expression\n            | expression CMP_OP expressionexpression : NUMBER\n        | IDENTIFIER\n        | BOOLEAN expression : STRING expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : identifiant '=' expression  declaration : NUM identifiant '=' expression\n        | STR identifiant '=' expression\n        | BOOL identifiant '=' expression\n        | EMO_NUM identifiant '=' expression\n        | EMO_STR identifiant '=' expression\n        | EMO_BOOL identifiant '=' expression "
    
_lr_action_items = {'PRINT':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[7,7,-23,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'EMO_PENCIL':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[8,8,-23,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NEWLINE':([0,2,3,4,5,6,9,27,29,31,32,33,34,36,58,60,61,62,63,64,77,78,79,80,88,90,93,94,95,96,97,98,99,100,105,106,115,116,121,122,129,130,131,133,136,138,139,141,143,144,],[9,9,9,-5,-6,-7,-23,9,-8,-27,-28,-29,-30,-9,-32,-33,9,9,9,9,-24,-25,-26,-31,-34,-37,-35,-36,-38,-39,-10,-11,-12,-13,9,9,9,9,-20,-21,-14,-15,9,9,9,9,-16,-17,-18,-19,]),'WHILE':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[11,11,-23,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'EMO_EYES':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[12,12,-23,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IF':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[13,13,-23,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'EMO_CHECK':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[14,14,-23,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FOR':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[15,15,-23,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'EMO_CREEPY_SMILE':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[16,16,-23,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'EMO_CREEPY_SMILE_REVERSED':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[18,18,-23,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'EMO_PLEADING':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[20,20,-23,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'EMO_DEVIL':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[21,21,-23,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'NUM':([0,3,9,15,27,61,62,63,64,105,106,115,116,131,133,136,138,],[17,17,-23,43,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'STR':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[22,22,-23,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'BOOL':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[23,23,-23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'EMO_NUM':([0,3,9,18,20,21,27,61,62,63,64,105,106,115,116,131,133,136,138,],[19,19,-23,46,48,49,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EMO_STR':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[24,24,-23,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'EMO_BOOL':([0,3,9,27,61,62,63,64,105,106,115,116,131,133,136,138,],[25,25,-23,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'IDENTIFIER':([0,3,7,8,9,11,12,13,14,15,16,17,19,22,23,24,25,26,27,30,35,37,43,46,48,49,55,56,57,61,62,63,64,65,67,68,70,71,72,73,74,75,76,86,89,101,103,105,106,110,112,115,116,117,119,126,128,131,133,136,138,],[26,26,32,32,-23,32,32,32,32,26,26,26,26,26,26,26,26,-22,26,32,32,32,26,26,26,26,32,32,32,26,26,26,26,32,32,32,32,32,32,32,32,32,32,32,32,32,32,26,26,32,32,26,26,32,32,32,32,26,26,26,26,]),'$end':([1,2,4,5,6,9,27,28,29,31,32,33,34,36,54,58,60,77,78,79,80,88,90,93,94,95,96,97,98,99,100,121,122,129,130,139,141,143,144,],[0,-1,-5,-6,-7,-23,-2,-4,-8,-27,-28,-29,-30,-9,-3,-32,-33,-24,-25,-26,-31,-34,-37,-35,-36,-38,-39,-10,-11,-12,-13,-20,-21,-14,-15,-16,-17,-18,-19,]),'}':([2,4,5,6,9,27,28,29,31,32,33,34,36,54,58,60,77,78,79,80,81,82,83,84,88,90,93,94,95,96,97,98,99,100,113,114,121,122,123,124,129,130,135,137,139,140,141,142,143,144,],[-1,-5,-6,-7,-23,-2,-4,-8,-27,-28,-29,-30,-9,-3,-32,-33,-24,-25,-26,-31,97,98,99,100,-34,-37,-35,-36,-38,-39,-10,-11,-12,-13,121,122,-20,-21,129,130,-14,-15,139,141,-16,143,-17,144,-18,-19,]),'NUMBER':([7,8,11,12,13,14,26,30,35,37,55,56,57,65,67,68,70,71,72,73,74,75,76,86,89,101,103,110,112,117,119,126,128,],[31,31,31,31,31,31,-22,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BOOLEAN':([7,8,11,12,13,14,26,30,35,37,55,56,57,65,67,68,70,71,72,73,74,75,76,86,89,101,103,110,112,117,119,126,128,],[33,33,33,33,33,33,-22,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'STRING':([7,8,11,12,13,14,26,30,35,37,55,56,57,65,67,68,70,71,72,73,74,75,76,86,89,101,103,110,112,117,119,126,128,],[34,34,34,34,34,34,-22,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'(':([7,8,11,12,13,14,26,30,35,37,55,56,57,65,67,68,70,71,72,73,74,75,76,86,89,101,103,110,112,117,119,126,128,],[35,35,35,35,35,35,-22,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'ADD_OP':([7,8,11,12,13,14,26,29,30,31,32,33,34,35,36,37,38,39,40,41,55,56,57,58,59,60,65,67,68,70,71,72,73,74,75,76,77,78,79,80,85,86,87,88,89,90,91,92,93,94,95,96,101,102,103,104,109,110,111,112,117,118,119,120,125,126,127,128,132,134,],[30,30,30,30,30,30,-22,55,30,-27,-28,-29,-30,30,55,30,55,55,55,55,30,30,30,-32,55,55,30,30,30,30,30,30,30,30,30,30,-24,-25,55,-31,55,30,55,55,30,55,55,55,55,55,55,55,30,55,30,55,55,30,55,30,30,55,30,55,55,30,55,30,55,55,]),'=':([10,26,45,47,50,51,52,53,],[37,-22,68,70,73,74,75,76,]),'IN':([26,42,44,66,69,],[-22,65,67,86,89,]),'MUL_OP':([29,31,32,33,34,36,38,39,40,41,58,59,60,77,78,79,80,85,87,88,90,91,92,93,94,95,96,102,104,109,111,118,120,125,127,132,134,],[56,-27,-28,-29,-30,56,56,56,56,56,-32,56,56,56,-25,56,-31,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'CMP_OP':([29,31,32,33,34,36,38,39,40,41,58,59,60,77,78,79,80,85,87,88,90,91,92,93,94,95,96,102,104,109,111,118,120,125,127,132,134,],[57,-27,-28,-29,-30,57,57,57,57,57,-32,57,57,-24,-25,57,-31,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'{':([31,32,33,34,38,39,40,41,58,77,78,79,80,91,92,107,108,125,127,132,134,],[-27,-28,-29,-30,61,62,63,64,-32,-24,-25,-26,-31,105,106,115,116,131,133,136,138,]),')':([31,32,33,34,58,59,77,78,79,80,],[-27,-28,-29,-30,-32,80,-24,-25,-26,-31,]),',':([31,32,33,34,58,77,78,79,80,85,87,102,104,109,111,118,120,],[-27,-28,-29,-30,-32,-24,-25,-26,-31,101,103,110,112,117,119,126,128,]),'ELSE':([99,],[107,]),'EMO_CROSS':([100,],[108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,27,61,62,63,64,105,106,115,116,131,133,136,138,],[1,28,54,81,82,83,84,113,114,123,124,135,137,140,142,]),'statement':([0,3,27,61,62,63,64,105,106,115,116,131,133,136,138,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'line':([0,2,3,27,61,62,63,64,105,106,115,116,131,133,136,138,],[3,27,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignation':([0,3,27,61,62,63,64,105,106,115,116,131,133,136,138,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'structure':([0,3,27,61,62,63,64,105,106,115,116,131,133,136,138,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'declaration':([0,3,27,61,62,63,64,105,106,115,116,131,133,136,138,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'identifiant':([0,3,15,16,17,19,22,23,24,25,27,43,46,48,49,61,62,63,64,105,106,115,116,131,133,136,138,],[10,10,42,44,45,47,50,51,52,53,10,66,69,71,72,10,10,10,10,10,10,10,10,10,10,10,10,]),'expression':([7,8,11,12,13,14,30,35,37,55,56,57,65,67,68,70,71,72,73,74,75,76,86,89,101,103,110,112,117,119,126,128,],[29,36,38,39,40,41,58,59,60,77,78,79,85,87,88,90,91,92,93,94,95,96,102,104,109,111,118,120,125,127,132,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserEmo.py',14),
  ('programme -> statement line','programme',2,'p_programme_statement','parserEmo.py',15),
  ('programme -> statement line programme','programme',3,'p_programme_recursive','parserEmo.py',19),
  ('programme -> line programme','programme',2,'p_programme_recursive_line','parserEmo.py',23),
  ('statement -> assignation','statement',1,'p_statement','parserEmo.py',27),
  ('statement -> structure','statement',1,'p_statement','parserEmo.py',28),
  ('statement -> declaration','statement',1,'p_statement','parserEmo.py',29),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserEmo.py',33),
  ('statement -> EMO_PENCIL expression','statement',2,'p_statement_print','parserEmo.py',34),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserEmo.py',38),
  ('structure -> EMO_EYES expression { programme }','structure',5,'p_structure','parserEmo.py',39),
  ('structure -> IF expression { programme }','structure',5,'p_cond_if','parserEmo.py',43),
  ('structure -> EMO_CHECK expression { programme }','structure',5,'p_cond_if','parserEmo.py',44),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_cond_if_else','parserEmo.py',48),
  ('structure -> EMO_CHECK expression { programme } EMO_CROSS { programme }','structure',9,'p_cond_if_else','parserEmo.py',49),
  ('structure -> FOR identifiant IN expression , expression , expression { programme }','structure',11,'p_for','parserEmo.py',55),
  ('structure -> EMO_CREEPY_SMILE identifiant IN expression , expression , expression { programme }','structure',11,'p_for','parserEmo.py',56),
  ('structure -> FOR NUM identifiant IN expression , expression , expression { programme }','structure',12,'p_for_decl','parserEmo.py',66),
  ('structure -> EMO_CREEPY_SMILE_REVERSED EMO_NUM identifiant IN expression , expression , expression { programme }','structure',12,'p_for_decl','parserEmo.py',67),
  ('structure -> EMO_PLEADING EMO_NUM identifiant expression { programme }','structure',7,'p_for_pleading','parserEmo.py',76),
  ('structure -> EMO_DEVIL EMO_NUM identifiant expression { programme }','structure',7,'p_for_devil','parserEmo.py',85),
  ('identifiant -> IDENTIFIER','identifiant',1,'p_identifiant','parserEmo.py',94),
  ('line -> NEWLINE','line',1,'p_newline','parserEmo.py',99),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserEmo.py',103),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserEmo.py',104),
  ('expression -> expression CMP_OP expression','expression',3,'p_expression_op','parserEmo.py',105),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',109),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',110),
  ('expression -> BOOLEAN','expression',1,'p_expression_num_or_var_or_bool','parserEmo.py',111),
  ('expression -> STRING','expression',1,'p_expression_string','parserEmo.py',115),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserEmo.py',119),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserEmo.py',123),
  ('assignation -> identifiant = expression','assignation',3,'p_assign','parserEmo.py',127),
  ('declaration -> NUM identifiant = expression','declaration',4,'p_declaration','parserEmo.py',131),
  ('declaration -> STR identifiant = expression','declaration',4,'p_declaration','parserEmo.py',132),
  ('declaration -> BOOL identifiant = expression','declaration',4,'p_declaration','parserEmo.py',133),
  ('declaration -> EMO_NUM identifiant = expression','declaration',4,'p_declaration','parserEmo.py',134),
  ('declaration -> EMO_STR identifiant = expression','declaration',4,'p_declaration','parserEmo.py',135),
  ('declaration -> EMO_BOOL identifiant = expression','declaration',4,'p_declaration','parserEmo.py',136),
]
