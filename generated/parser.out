Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    TRUE

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> declaration
Rule 6     statement -> PRINT expression
Rule 7     structure -> WHILE expression { programme }
Rule 8     expression -> expression ADD_OP expression
Rule 9     expression -> expression MUL_OP expression
Rule 10    expression -> NUMBER
Rule 11    expression -> IDENTIFIER
Rule 12    expression -> BOOLEAN
Rule 13    expression -> STRING
Rule 14    expression -> ( expression )
Rule 15    expression -> ADD_OP expression
Rule 16    assignation -> IDENTIFIER = expression
Rule 17    declaration -> NUM IDENTIFIER = expression
Rule 18    declaration -> STR IDENTIFIER = expression
Rule 19    declaration -> BOOL IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 14
)                    : 14
;                    : 2
=                    : 16 17 18 19
ADD_OP               : 8 15
BOOL                 : 19
BOOLEAN              : 12
FALSE                : 
IDENTIFIER           : 11 16 17 18 19
MUL_OP               : 9
NUM                  : 17
NUMBER               : 10
PRINT                : 6
STR                  : 18
STRING               : 13
TRUE                 : 
WHILE                : 7
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

assignation          : 3
declaration          : 5
expression           : 6 7 8 8 9 9 14 15 16 17 18 19
programme            : 2 7 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . declaration
    (6) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { programme }
    (17) declaration -> . NUM IDENTIFIER = expression
    (18) declaration -> . STR IDENTIFIER = expression
    (19) declaration -> . BOOL IDENTIFIER = expression

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    NUM             shift and go to state 9
    STR             shift and go to state 10
    BOOL            shift and go to state 11

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    declaration                    shift and go to state 5

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 12


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> declaration .

    ;               reduce using rule 5 (statement -> declaration .)
    $end            reduce using rule 5 (statement -> declaration .)
    }               reduce using rule 5 (statement -> declaration .)


state 6

    (6) statement -> PRINT . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 13

state 7

    (16) assignation -> IDENTIFIER . = expression

    =               shift and go to state 20


state 8

    (7) structure -> WHILE . expression { programme }
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 21

state 9

    (17) declaration -> NUM . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 22


state 10

    (18) declaration -> STR . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 23


state 11

    (19) declaration -> BOOL . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 24


state 12

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . declaration
    (6) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { programme }
    (17) declaration -> . NUM IDENTIFIER = expression
    (18) declaration -> . STR IDENTIFIER = expression
    (19) declaration -> . BOOL IDENTIFIER = expression

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    NUM             shift and go to state 9
    STR             shift and go to state 10
    BOOL            shift and go to state 11

    statement                      shift and go to state 2
    programme                      shift and go to state 25
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    declaration                    shift and go to state 5

state 13

    (6) statement -> PRINT expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    }               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 14

    (15) expression -> ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 28

state 15

    (10) expression -> NUMBER .

    ADD_OP          reduce using rule 10 (expression -> NUMBER .)
    MUL_OP          reduce using rule 10 (expression -> NUMBER .)
    ;               reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    }               reduce using rule 10 (expression -> NUMBER .)
    {               reduce using rule 10 (expression -> NUMBER .)
    )               reduce using rule 10 (expression -> NUMBER .)


state 16

    (11) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 11 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 11 (expression -> IDENTIFIER .)
    ;               reduce using rule 11 (expression -> IDENTIFIER .)
    $end            reduce using rule 11 (expression -> IDENTIFIER .)
    }               reduce using rule 11 (expression -> IDENTIFIER .)
    {               reduce using rule 11 (expression -> IDENTIFIER .)
    )               reduce using rule 11 (expression -> IDENTIFIER .)


state 17

    (12) expression -> BOOLEAN .

    ADD_OP          reduce using rule 12 (expression -> BOOLEAN .)
    MUL_OP          reduce using rule 12 (expression -> BOOLEAN .)
    ;               reduce using rule 12 (expression -> BOOLEAN .)
    $end            reduce using rule 12 (expression -> BOOLEAN .)
    }               reduce using rule 12 (expression -> BOOLEAN .)
    {               reduce using rule 12 (expression -> BOOLEAN .)
    )               reduce using rule 12 (expression -> BOOLEAN .)


state 18

    (13) expression -> STRING .

    ADD_OP          reduce using rule 13 (expression -> STRING .)
    MUL_OP          reduce using rule 13 (expression -> STRING .)
    ;               reduce using rule 13 (expression -> STRING .)
    $end            reduce using rule 13 (expression -> STRING .)
    }               reduce using rule 13 (expression -> STRING .)
    {               reduce using rule 13 (expression -> STRING .)
    )               reduce using rule 13 (expression -> STRING .)


state 19

    (14) expression -> ( . expression )
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 29

state 20

    (16) assignation -> IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 30

state 21

    (7) structure -> WHILE expression . { programme }
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    {               shift and go to state 31
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 22

    (17) declaration -> NUM IDENTIFIER . = expression

    =               shift and go to state 32


state 23

    (18) declaration -> STR IDENTIFIER . = expression

    =               shift and go to state 33


state 24

    (19) declaration -> BOOL IDENTIFIER . = expression

    =               shift and go to state 34


state 25

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 26

    (8) expression -> expression ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 35

state 27

    (9) expression -> expression MUL_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 36

state 28

    (15) expression -> ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 15 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 15 (expression -> ADD_OP expression .)
    ;               reduce using rule 15 (expression -> ADD_OP expression .)
    $end            reduce using rule 15 (expression -> ADD_OP expression .)
    }               reduce using rule 15 (expression -> ADD_OP expression .)
    {               reduce using rule 15 (expression -> ADD_OP expression .)
    )               reduce using rule 15 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]


state 29

    (14) expression -> ( expression . )
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    )               shift and go to state 37
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 30

    (16) assignation -> IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 31

    (7) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . declaration
    (6) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { programme }
    (17) declaration -> . NUM IDENTIFIER = expression
    (18) declaration -> . STR IDENTIFIER = expression
    (19) declaration -> . BOOL IDENTIFIER = expression

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    NUM             shift and go to state 9
    STR             shift and go to state 10
    BOOL            shift and go to state 11

    programme                      shift and go to state 38
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    declaration                    shift and go to state 5

state 32

    (17) declaration -> NUM IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 39

state 33

    (18) declaration -> STR IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 40

state 34

    (19) declaration -> BOOL IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . BOOLEAN
    (13) expression -> . STRING
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    (               shift and go to state 19
    ADD_OP          shift and go to state 14

    expression                     shift and go to state 41

state 35

    (8) expression -> expression ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 8 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 8 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 8 (expression -> expression ADD_OP expression .)
    }               reduce using rule 8 (expression -> expression ADD_OP expression .)
    {               reduce using rule 8 (expression -> expression ADD_OP expression .)
    )               reduce using rule 8 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 27

  ! MUL_OP          [ reduce using rule 8 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]


state 36

    (9) expression -> expression MUL_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 9 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 9 (expression -> expression MUL_OP expression .)
    }               reduce using rule 9 (expression -> expression MUL_OP expression .)
    {               reduce using rule 9 (expression -> expression MUL_OP expression .)
    )               reduce using rule 9 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]


state 37

    (14) expression -> ( expression ) .

    ADD_OP          reduce using rule 14 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 14 (expression -> ( expression ) .)
    ;               reduce using rule 14 (expression -> ( expression ) .)
    $end            reduce using rule 14 (expression -> ( expression ) .)
    }               reduce using rule 14 (expression -> ( expression ) .)
    {               reduce using rule 14 (expression -> ( expression ) .)
    )               reduce using rule 14 (expression -> ( expression ) .)


state 38

    (7) structure -> WHILE expression { programme . }

    }               shift and go to state 42


state 39

    (17) declaration -> NUM IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 17 (declaration -> NUM IDENTIFIER = expression .)
    $end            reduce using rule 17 (declaration -> NUM IDENTIFIER = expression .)
    }               reduce using rule 17 (declaration -> NUM IDENTIFIER = expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 40

    (18) declaration -> STR IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 18 (declaration -> STR IDENTIFIER = expression .)
    $end            reduce using rule 18 (declaration -> STR IDENTIFIER = expression .)
    }               reduce using rule 18 (declaration -> STR IDENTIFIER = expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 41

    (19) declaration -> BOOL IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 19 (declaration -> BOOL IDENTIFIER = expression .)
    $end            reduce using rule 19 (declaration -> BOOL IDENTIFIER = expression .)
    }               reduce using rule 19 (declaration -> BOOL IDENTIFIER = expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27


state 42

    (7) structure -> WHILE expression { programme } .

    ;               reduce using rule 7 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 7 (structure -> WHILE expression { programme } .)
    }               reduce using rule 7 (structure -> WHILE expression { programme } .)

